responda sempre em pt br 
### üîÑ Consci√™ncia e Contexto do Projeto
- **Sempre leia `PLANNING.md`** no in√≠cio de uma nova conversa para entender a arquitetura, objetivos, estilo e restri√ß√µes do projeto.
- **Verifique `TASK.md`** antes de iniciar uma nova tarefa. Se a tarefa n√£o estiver listada, adicione-a com uma breve descri√ß√£o e a data de hoje.
- **Use conven√ß√µes de nomenclatura, estrutura de arquivos e padr√µes de arquitetura consistentes** conforme descrito em `PLANNING.md`.
- **Use venv_linux** (o ambiente virtual) sempre que executar comandos Python, incluindo testes unit√°rios.

### üß± Estrutura e Modularidade do C√≥digo
- **Nunca crie um arquivo com mais de 500 linhas de c√≥digo.** Se um arquivo se aproximar desse limite, refatore dividindo-o em m√≥dulos ou arquivos auxiliares.
- **Organize o c√≥digo em m√≥dulos claramente separados**, agrupados por funcionalidade ou responsabilidade.
  Para agentes, isso se parece com:
    - `agent.py` - Defini√ß√£o principal do agente e l√≥gica de execu√ß√£o 
    - `tools.py` - Fun√ß√µes de ferramentas usadas pelo agente 
    - `prompts.py` - Prompts do sistema
- **Use imports claros e consistentes** (prefira imports relativos dentro de pacotes).
- **Use imports claros e consistentes** (prefira imports relativos dentro de pacotes).
- **Use python_dotenv e load_env()** para vari√°veis de ambiente.

### üß™ Testes e Confiabilidade
- **Sempre crie testes unit√°rios Pytest para novas funcionalidades** (fun√ß√µes, classes, rotas, etc.).
- **Ap√≥s atualizar qualquer l√≥gica**, verifique se os testes unit√°rios existentes precisam ser atualizados. Se sim, fa√ßa isso.
- **Os testes devem ficar em uma pasta `/tests`** espelhando a estrutura principal do app.
  - Inclua pelo menos:
    - 1 teste para uso esperado
    - 1 caso extremo
    - 1 caso de falha

### ‚úÖ Conclus√£o de Tarefas
- **Marque tarefas conclu√≠das em `TASK.md`** imediatamente ap√≥s termin√°-las.
- Adicione novas sub-tarefas ou TODOs descobertos durante o desenvolvimento a `TASK.md` sob uma se√ß√£o "Descoberto Durante o Trabalho".

### üìé Estilo e Conven√ß√µes
- **Use Python** como linguagem principal.
- **Siga PEP8**, use type hints e formate com `black`.
- **Use `pydantic` para valida√ß√£o de dados**.
- Use `FastAPI` para APIs e `SQLAlchemy` ou `SQLModel` para ORM se aplic√°vel.
- Escreva **docstrings para cada fun√ß√£o** usando o estilo Google:
  ```python
  def exemplo():
      """
      Resumo breve.

      Args:
          param1 (tipo): Descri√ß√£o.

      Returns:
          tipo: Descri√ß√£o.
      """
  ```

### üìö Documenta√ß√£o e Explicabilidade
- **Atualize `README.md`** quando novas funcionalidades forem adicionadas, depend√™ncias mudarem ou etapas de configura√ß√£o forem modificadas.
- **Comente c√≥digo n√£o √≥bvio** e garanta que tudo seja compreens√≠vel para um desenvolvedor de n√≠vel m√©dio.
- Ao escrever l√≥gica complexa, **adicione um coment√°rio inline `# Motivo:`** explicando o porqu√™, n√£o apenas o qu√™.

### üìÅ Organiza√ß√£o de Arquivos
- **Documenta√ß√£o**: Coloque todos os arquivos de documenta√ß√£o (`.md`) na pasta `docs/`
- **Scripts SQL**: Coloque todos os arquivos SQL na pasta `sql-db/`
- **Scripts Python**: Coloque todos os arquivos Python na pasta `py-prp/`
- **Evite arquivos na raiz**: Use as pastas espec√≠ficas para manter organiza√ß√£o
- **Estrutura recomendada**:
  ```
  docs/           # Documenta√ß√£o (.md)
  sql-db/         # Scripts SQL (.sql)
  py-prp/         # Scripts Python (.py)
  mcp-*/          # Servidores MCP
  use-cases/      # Casos de uso
  ```

### üß† Regras de Comportamento da IA
- **Nunca assuma contexto ausente. Fa√ßa perguntas se estiver incerto.**
- **Nunca alucine bibliotecas ou fun√ß√µes** ‚Äì use apenas pacotes Python conhecidos e verificados.
- **Sempre confirme que caminhos de arquivo e nomes de m√≥dulos** existem antes de referenci√°-los em c√≥digo ou testes.
- **Nunca delete ou sobrescreva c√≥digo existente** a menos que seja explicitamente instru√≠do ou se fizer parte de uma tarefa de `TASK.md`.

### üîç Consultas MCP Turso para PRPs
- **SEMPRE consulte o MCP Turso** quando perguntas envolverem PRPs, conhecimento ou conversas
- **Use mcp_turso_search_knowledge** para buscar informa√ß√µes sobre PRPs no banco de dados
- **Use mcp_turso_execute_read_only_query** para consultas SQL espec√≠ficas sobre PRPs
- **Use mcp_turso_get_conversations** para buscar conversas relacionadas a PRPs
- **Priorize dados do banco Turso** sobre informa√ß√µes gen√©ricas ou assumidas
- **Sempre verifique o contexto-memory** antes de responder sobre PRPs
- **Use mcp_turso_list_tables** para entender a estrutura do banco quando necess√°rio

### üöÄ MCP Turso - Uso Universal no Cursor
- **SEMPRE use o MCP Turso** quando precisar fazer qualquer coisa no Cursor Agent
- **Priorize consultas ao banco** antes de assumir ou usar informa√ß√µes gen√©ricas
- **Use mcp_turso_search_knowledge** para buscar qualquer informa√ß√£o no sistema
- **Use mcp_turso_execute_read_only_query** para consultas SQL espec√≠ficas
- **Use mcp_turso_get_conversations** para buscar hist√≥rico de conversas
- **Use mcp_turso_add_conversation** para registrar novas conversas importantes
- **Use mcp_turso_add_knowledge** para adicionar conhecimento ao sistema
- **Sempre verifique o contexto-memory** antes de responder qualquer pergunta
- **Consulte o banco Turso** para dados sobre: PRPs, agentes, arquiteturas, configura√ß√µes, status do projeto
- **Use mcp_turso_list_databases** e **mcp_turso_list_tables** para entender a estrutura dos dados
- **Priorize dados reais do sistema** sobre informa√ß√µes gen√©ricas ou assumidas
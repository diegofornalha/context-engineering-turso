#!/usr/bin/env python3
"""
Script para atualizar documenta√ß√£o para usar apenas banco da nuvem
"""

import os
import re
from pathlib import Path

def update_file(file_path):
    """Atualiza um arquivo removendo refer√™ncias a banco local"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Substitui√ß√µes para remover refer√™ncias a banco local
    replacements = [
        # Remover refer√™ncias a .db
        (r'\.db', ''),
        (r'sqlite3\.connect\([^)]+\)', 'self.client.execute'),
        (r'conn = sqlite3\.connect\([^)]+\)', 'result = self.client.execute'),
        (r'cursor = conn\.cursor\(\)', ''),
        (r'conn\.commit\(\)', ''),
        (r'conn\.close\(\)', ''),
        (r'cursor\.execute', 'self.client.execute'),
        (r'cursor\.fetchall\(\)', 'result.rows'),
        (r'cursor\.fetchone\(\)', 'result.rows[0] if result.rows else None'),
        (r'cursor\.lastrowid', 'result.lastInsertRowid'),
        
        # Atualizar coment√°rios
        (r'# Para demonstra√ß√£o, usaremos SQLite local', '# Usar banco Turso da nuvem'),
        (r'# Em produ√ß√£o, usar√≠amos o cliente Turso', '# Usar cliente Turso da nuvem'),
        (r'# Para demonstra√ß√£o, usar SQLite local', '# Usar banco Turso da nuvem'),
        
        # Remover refer√™ncias a local_path
        (r'local_path.*description.*Local.*path', 'database: { type: "string", description: "Database name" }'),
        (r'required.*local_path', 'required: ["database"]'),
        
        # Atualizar nomes de fun√ß√µes
        (r'sync_embedded_replica', 'sync_cloud_database'),
        (r'get_replica_status', 'get_sync_status'),
        (r'create_embedded_replica', 'sync_cloud_database'),
        
        # Atualizar descri√ß√µes
        (r'Manually sync embedded replica with remote', 'Manually sync cloud database with latest changes'),
        (r'Get embedded replica sync status', 'Get cloud database sync status'),
        (r'Local replica path', 'Database name to sync'),
        (r'Local path for replica', 'Database name'),
        
        # Remover refer√™ncias a desenvolvimento local
        (r'üîÑ Desenvolvimento Local.*Embedded replicas', 'üîÑ Sincroniza√ß√£o de Nuvem: Cloud database sync'),
        (r'create_embedded_replica.*Replica√ß√£o local', 'sync_cloud_database - Sincroniza√ß√£o de nuvem'),
    ]
    
    # Aplicar substitui√ß√µes
    for old_pattern, new_pattern in replacements:
        content = re.sub(old_pattern, new_pattern, content, flags=re.IGNORECASE)
    
    # Escrever arquivo atualizado
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Atualizado: {file_path}")

def main():
    """Atualiza todos os arquivos da documenta√ß√£o"""
    
    docs_dir = Path("docs-turso")
    
    print("üßπ REMOVENDO REFER√äNCIAS A BANCO LOCAL")
    print("=" * 50)
    
    # Lista de arquivos para atualizar
    files_to_update = [
        "ADDITIONAL_TOOLS_PLAN.md",
        "GUIA_COMPLETO_TURSO_MCP.md"
    ]
    
    for filename in files_to_update:
        file_path = docs_dir / filename
        if file_path.exists():
            update_file(file_path)
        else:
            print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {file_path}")
    
    print()
    print("‚úÖ ATUALIZA√á√ÉO CONCLU√çDA!")
    print("üìã Arquivos atualizados para usar apenas banco da nuvem")
    print("üóëÔ∏è Refer√™ncias a banco local removidas")

if __name__ == "__main__":
    main() 
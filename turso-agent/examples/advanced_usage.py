#!/usr/bin/env python3
"""
Turso Agent - Exemplo de Uso Avan√ßado
Demonstra funcionalidades avan√ßadas e cen√°rios complexos do agente especialista
"""

import asyncio
import sys
import json
from pathlib import Path

# Adicionar path do turso-agent
sys.path.append(str(Path(__file__).parent.parent))

from config.turso_settings import TursoSettings
from tools.turso_manager import TursoManager
from tools.mcp_integrator import MCPTursoIntegrator
from agents.turso_specialist import TursoSpecialistAgent

async def cenario_setup_completo():
    """Cen√°rio 1: Setup completo de projeto Turso do zero"""
    
    print("üéØ **CEN√ÅRIO 1: SETUP COMPLETO DE PROJETO**")
    print("="*55)
    
    try:
        # Passo 1: Verificar ambiente
        print("1. üîç Verificando ambiente...")
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        config_status = await turso_manager.check_configuration()
        mcp_status = await mcp_integrator.check_mcp_status()
        
        print(f"   üìä Turso: {config_status}")
        print(f"   üîå MCP: {mcp_status}")
        
        # Passo 2: Setup MCP se necess√°rio
        if "‚ùå" in mcp_status or "‚ö†Ô∏è" in mcp_status:
            print("\\n2. üîß Configurando MCP...")
            setup_success = await mcp_integrator.setup_mcp_server()
            
            if setup_success:
                print("   ‚úÖ MCP configurado com sucesso!")
            else:
                print("   ‚ö†Ô∏è MCP setup falhou, continuando sem MCP")
        
        # Passo 3: Criar database de exemplo
        print("\\n3. üóÑÔ∏è Criando database de exemplo...")
        db_name = "projeto_exemplo"
        create_success = await turso_manager.create_database(
            db_name, 
            group="default",
            regions=["lhr"]  # London
        )
        
        if create_success:
            print(f"   ‚úÖ Database '{db_name}' criado!")
        else:
            print(f"   ‚ö†Ô∏è Database '{db_name}' j√° existe ou erro na cria√ß√£o")
        
        # Passo 4: Executar migra√ß√µes
        print("\\n4. üîÑ Executando migra√ß√µes...")
        migration_success = await turso_manager.run_migrations()
        
        if migration_success:
            print("   ‚úÖ Migra√ß√µes executadas!")
        
        # Passo 5: Configurar LLM integration
        print("\\n5. ü§ñ Configurando LLM integration...")
        llm_success = await mcp_integrator.configure_llm_integration()
        
        if llm_success:
            print("   ‚úÖ LLM integration configurada!")
        
        print("\\nüéâ **SETUP COMPLETO FINALIZADO!**")
        print("üöÄ Projeto Turso pronto para desenvolvimento!")
        
    except Exception as e:
        print(f"‚ùå Erro no setup: {e}")

async def cenario_troubleshooting_avancado():
    """Cen√°rio 2: Troubleshooting avan√ßado de problemas"""
    
    print("\\nüéØ **CEN√ÅRIO 2: TROUBLESHOOTING AVAN√áADO**")
    print("="*55)
    
    try:
        # Inicializar agente completo
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        agent = TursoSpecialistAgent(
            turso_manager=turso_manager,
            mcp_integrator=mcp_integrator,
            settings=settings
        )
        
        # Problemas simulados para troubleshooting
        problemas = [
            {
                "tipo": "connection",
                "descricao": "N√£o consigo conectar no database, erro de authentication",
                "contexto": "Ambiente de produ√ß√£o"
            },
            {
                "tipo": "performance", 
                "descricao": "Queries muito lentas, timeout frequente",
                "contexto": "Database com 100k+ registros"
            },
            {
                "tipo": "mcp",
                "descricao": "MCP tools n√£o aparecem no LLM",
                "contexto": "Cursor IDE com MCP configurado"
            },
            {
                "tipo": "replication",
                "descricao": "Dados inconsistentes entre replicas",
                "contexto": "Multi-region deployment"
            }
        ]
        
        for i, problema in enumerate(problemas, 1):
            print(f"\\n{i}. üîß **PROBLEMA:** {problema['descricao']}")
            print(f"   üìç Contexto: {problema['contexto']}")
            
            # Usar agente para troubleshooting
            solucao = await agent.troubleshoot_issue(problema['descricao'])
            print("   ü§ñ **SOLU√á√ÉO:**")
            print("   " + solucao.replace("\\n", "\\n   "))
            
            await asyncio.sleep(1)  # Pausa para leitura
        
        print("\\n‚úÖ Troubleshooting avan√ßado completo!")
        
    except Exception as e:
        print(f"‚ùå Erro no troubleshooting: {e}")

async def cenario_otimizacao_performance():
    """Cen√°rio 3: Otimiza√ß√£o completa de performance"""
    
    print("\\nüéØ **CEN√ÅRIO 3: OTIMIZA√á√ÉO DE PERFORMANCE**")
    print("="*55)
    
    try:
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        agent = TursoSpecialistAgent(
            turso_manager=turso_manager,
            mcp_integrator=mcp_integrator,
            settings=settings
        )
        
        # Fase 1: An√°lise inicial
        print("1. üìä An√°lise inicial de performance...")
        
        if settings.default_database:
            analysis = await turso_manager.analyze_performance(settings.default_database)
            
            if analysis.get('database'):
                print(f"   üìà Database analisado: {analysis['database']}")
                print(f"   üìã M√©tricas coletadas: {len(analysis.get('metrics', {}))}")
                print(f"   üí° Recomenda√ß√µes: {len(analysis.get('recommendations', []))}")
            else:
                print("   ‚ö†Ô∏è An√°lise limitada - usando simula√ß√£o")
        
        # Fase 2: Otimiza√ß√£o autom√°tica
        print("\\n2. üöÄ Executando otimiza√ß√£o autom√°tica...")
        optimization_result = await agent.optimize_system()
        print(optimization_result)
        
        # Fase 3: Validation p√≥s-otimiza√ß√£o
        print("\\n3. ‚úÖ Valida√ß√£o p√≥s-otimiza√ß√£o...")
        validation_result = await agent.run_validation_gates()
        
        # Extrair resultado de validation
        if "Todos os testes passaram" in validation_result:
            print("   ‚úÖ Valida√ß√£o: Todos os gates passaram")
        else:
            print("   ‚ö†Ô∏è Valida√ß√£o: Alguns gates falharam")
        
        print("\\nüéØ **OTIMIZA√á√ÉO COMPLETA!**")
        print("üìà Performance melhorada e validada!")
        
    except Exception as e:
        print(f"‚ùå Erro na otimiza√ß√£o: {e}")

async def cenario_seguranca_compliance():
    """Cen√°rio 4: Auditoria completa de seguran√ßa e compliance"""
    
    print("\\nüéØ **CEN√ÅRIO 4: SEGURAN√áA E COMPLIANCE**")
    print("="*55)
    
    try:
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        agent = TursoSpecialistAgent(
            turso_manager=turso_manager,
            mcp_integrator=mcp_integrator,
            settings=settings
        )
        
        # Fase 1: Auditoria de seguran√ßa
        print("1. üõ°Ô∏è Executando auditoria de seguran√ßa...")
        security_audit = await agent.security_audit()
        print(security_audit)
        
        # Fase 2: Verifica√ß√£o MCP security
        print("\\n2. üîå Verificando seguran√ßa MCP...")
        mcp_security = await mcp_integrator.check_security()
        print(f"   üìä MCP Security Status: {mcp_security}")
        
        # Fase 3: Recommendations de seguran√ßa
        print("\\n3. üí° Recomenda√ß√µes de seguran√ßa:")
        
        recommendations = [
            "‚úÖ Implementar rota√ß√£o autom√°tica de tokens",
            "‚úÖ Configurar audit logging completo", 
            "‚úÖ Usar RLS policies para dados sens√≠veis",
            "‚úÖ Monitorar acessos an√¥malos",
            "‚úÖ Backup autom√°tico com encryption"
        ]
        
        for rec in recommendations:
            print(f"   {rec}")
        
        # Fase 4: Compliance check
        print("\\n4. üìã Verifica√ß√£o de compliance...")
        
        compliance_items = {
            "Token Security": settings.turso_api_token is not None,
            "Environment Variables": "TURSO_API_TOKEN" in str(settings.turso_api_token),
            "Audit Logging": settings.enable_audit_logging,
            "Secure Communication": True,  # HTTPS by default
            "Access Control": True  # MCP security model
        }
        
        for item, status in compliance_items.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"   {icon} {item}")
        
        compliance_score = sum(compliance_items.values()) / len(compliance_items) * 100
        print(f"\\nüìä **COMPLIANCE SCORE: {compliance_score:.0f}%**")
        
        if compliance_score >= 80:
            print("üéâ Compliance excelente!")
        elif compliance_score >= 60:
            print("‚ö†Ô∏è Compliance aceit√°vel, melhorias recomendadas")
        else:
            print("‚ùå Compliance insuficiente, a√ß√£o imediata necess√°ria")
        
    except Exception as e:
        print(f"‚ùå Erro na auditoria: {e}")

async def cenario_chat_especialista_avancado():
    """Cen√°rio 5: Chat especialista com contexto avan√ßado"""
    
    print("\\nüéØ **CEN√ÅRIO 5: CHAT ESPECIALISTA AVAN√áADO**")
    print("="*55)
    
    try:
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        agent = TursoSpecialistAgent(
            turso_manager=turso_manager,
            mcp_integrator=mcp_integrator,
            settings=settings
        )
        
        # Simula√ß√£o de conversa√ß√£o complexa
        conversacao = [
            {
                "contexto": "Desenvolvedor iniciante",
                "pergunta": "Estou come√ßando com Turso, qual a diferen√ßa entre libSQL e SQLite?",
                "categoria": "conceitos"
            },
            {
                "contexto": "Arquiteto de sistemas",
                "pergunta": "Como implementar uma estrat√©gia de backup em multi-region?",
                "categoria": "arquitetura"
            },
            {
                "contexto": "DevOps engineer",
                "pergunta": "Como configurar CI/CD com migra√ß√µes autom√°ticas?",
                "categoria": "devops"
            },
            {
                "contexto": "Security engineer",
                "pergunta": "Quais s√£o os pontos cr√≠ticos de seguran√ßa em deployment Turso?",
                "categoria": "seguran√ßa"
            },
            {
                "contexto": "Performance engineer",
                "pergunta": "Como otimizar queries para ambiente distribu√≠do edge?",
                "categoria": "performance"
            }
        ]
        
        print("üí¨ Simulando conversa√ß√£o especialista:")
        
        for i, item in enumerate(conversacao, 1):
            print(f"\\n{i}. üë§ **{item['contexto']}:** {item['pergunta']}")
            print(f"   üè∑Ô∏è Categoria: {item['categoria']}")
            
            resposta = await agent.chat(item['pergunta'])
            
            # Mostrar parte da resposta
            resposta_preview = resposta[:300] + "..." if len(resposta) > 300 else resposta
            print(f"   ü§ñ **Turso Agent:** {resposta_preview}")
            
            # Simular tempo de leitura
            await asyncio.sleep(1)
        
        print("\\n‚úÖ Chat especialista avan√ßado completo!")
        print("üéØ Agente demonstrou expertise em m√∫ltiplas √°reas!")
        
    except Exception as e:
        print(f"‚ùå Erro no chat: {e}")

async def cenario_monitoramento_continuo():
    """Cen√°rio 6: Sistema de monitoramento cont√≠nuo"""
    
    print("\\nüéØ **CEN√ÅRIO 6: MONITORAMENTO CONT√çNUO**")
    print("="*55)
    
    try:
        settings = TursoSettings()
        turso_manager = TursoManager(settings)
        mcp_integrator = MCPTursoIntegrator(settings)
        
        agent = TursoSpecialistAgent(
            turso_manager=turso_manager,
            mcp_integrator=mcp_integrator,
            settings=settings
        )
        
        print("üìä Iniciando ciclo de monitoramento...")
        
        # Simular monitoramento por 3 ciclos
        for ciclo in range(1, 4):
            print(f"\\nüîÑ **CICLO {ciclo}:**")
            
            # Health check geral
            config_status = await turso_manager.check_configuration()
            mcp_status = await mcp_integrator.check_mcp_status()
            
            print(f"   üìä Turso Health: {config_status}")
            print(f"   üîå MCP Health: {mcp_status}")
            
            # Performance check
            if settings.default_database:
                perf_info = await turso_manager.get_database_info(settings.default_database)
                if perf_info and not perf_info.get('error'):
                    print(f"   ‚ö° Database Status: ‚úÖ Operational")
                else:
                    print(f"   ‚ö° Database Status: ‚ö†Ô∏è Issues detected")
            
            # Security check
            security_status = await mcp_integrator.check_security()
            print(f"   üõ°Ô∏è Security: {security_status}")
            
            # System info
            system_info = await agent.get_system_info()
            if "‚úÖ" in system_info:
                print(f"   üñ•Ô∏è System: ‚úÖ All capabilities operational")
            else:
                print(f"   üñ•Ô∏è System: ‚ö†Ô∏è Some capabilities limited")
            
            # Aguardar pr√≥ximo ciclo
            if ciclo < 3:
                print(f"   ‚è≥ Aguardando pr√≥ximo ciclo...")
                await asyncio.sleep(2)
        
        print("\\nüìà **MONITORAMENTO COMPLETO!**")
        print("‚úÖ Sistema monitorado e validado continuamente!")
        
    except Exception as e:
        print(f"‚ùå Erro no monitoramento: {e}")

async def main():
    """Executa todos os cen√°rios avan√ßados"""
    
    print("üöÄ **TURSO AGENT - CEN√ÅRIOS AVAN√áADOS**")
    print("="*55)
    print("üìä Baseado no PRP ID 6: Agente Especialista Turso")
    print("üéØ Demonstrando cen√°rios complexos e avan√ßados")
    print("="*55)
    
    cenarios = [
        ("Setup Completo", cenario_setup_completo),
        ("Troubleshooting Avan√ßado", cenario_troubleshooting_avancado),
        ("Otimiza√ß√£o Performance", cenario_otimizacao_performance),
        ("Seguran√ßa & Compliance", cenario_seguranca_compliance),
        ("Chat Especialista", cenario_chat_especialista_avancado),
        ("Monitoramento Cont√≠nuo", cenario_monitoramento_continuo)
    ]
    
    print("\\nüìã **CEN√ÅRIOS DISPON√çVEIS:**")
    for i, (nome, _) in enumerate(cenarios, 1):
        print(f"   {i}. {nome}")
    
    print("\\nüéØ Executando todos os cen√°rios...")
    input("‚è≥ Pressione Enter para come√ßar...")
    
    for i, (nome, cenario_func) in enumerate(cenarios, 1):
        try:
            print(f"\\n{'='*60}")
            print(f"üéØ EXECUTANDO CEN√ÅRIO {i}: {nome.upper()}")
            print(f"{'='*60}")
            
            await cenario_func()
            
            if i < len(cenarios):
                input(f"\\n‚è≥ Pressione Enter para continuar para o pr√≥ximo cen√°rio...")
                
        except KeyboardInterrupt:
            print("\\nüëã Cen√°rios interrompidos pelo usu√°rio")
            break
        except Exception as e:
            print(f"\\n‚ùå Erro no cen√°rio {nome}: {e}")
            continue
    
    print("\\nüéâ **TODOS OS CEN√ÅRIOS COMPLETOS!**")
    print("üèÜ Turso Agent demonstrou expertise completa!")
    print("üöÄ Sistema pronto para uso em produ√ß√£o!")

if __name__ == "__main__":
    asyncio.run(main())
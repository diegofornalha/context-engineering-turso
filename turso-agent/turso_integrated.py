#!/usr/bin/env python3
"""
Turso Agent CLI - Vers√£o Integrada com MCP
Combina intelig√™ncia local com dados reais do banco
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import argparse
import json

# Adicionar diret√≥rio ao path
sys.path.insert(0, str(Path(__file__).parent))

from config.turso_settings import TursoSettings

# Importar as ferramentas MCP
sys.path.append(str(Path(__file__).parent.parent))
from mcp_turso_list_databases import mcp_turso_list_databases
from mcp_turso_execute_read_only_query import mcp_turso_execute_read_only_query
from mcp_turso_get_database_info import mcp_turso_get_database_info
from mcp_turso_list_tables import mcp_turso_list_tables
from mcp_turso_describe_table import mcp_turso_describe_table

class TursoAgentIntegrated:
    """CLI Turso Agent com integra√ß√£o MCP para dados reais"""
    
    def __init__(self):
        self.settings = TursoSettings()
        self.mcp_available = self._check_mcp_tools()
        
    def _check_mcp_tools(self):
        """Verifica se as ferramentas MCP est√£o dispon√≠veis"""
        try:
            # Tentar importar uma ferramenta MCP
            return callable(mcp_turso_list_databases)
        except:
            return False
    
    async def performance_real(self, table=None):
        """An√°lise de performance com dados REAIS do banco"""
        print("‚ö° AN√ÅLISE DE PERFORMANCE TURSO (DADOS REAIS)")
        print("="*60)
        
        if not self.mcp_available:
            print("‚ö†Ô∏è MCP n√£o dispon√≠vel - usando an√°lise offline")
            return await self._performance_offline(table)
        
        try:
            # Obter informa√ß√µes reais do banco
            print("\nüîç Conectando ao banco de dados...")
            db_info = await mcp_turso_get_database_info({"database": self.settings.default_database})
            
            print(f"\nüìä Database: {db_info.get('name', 'N/A')}")
            print(f"üìè Tabelas: {db_info.get('tableCount', 0)}")
            print(f"üíæ Tamanho: {db_info.get('size', 'N/A')}")
            
            # Listar tabelas reais
            print("\nüìã Analisando estrutura das tabelas...")
            tables_result = await mcp_turso_list_tables({"database": self.settings.default_database})
            tables = tables_result.get('tables', [])
            
            if table and table in tables:
                # An√°lise espec√≠fica da tabela
                print(f"\nüîç Analisando tabela '{table}'...")
                structure = await mcp_turso_describe_table({
                    "table_name": table,
                    "database": self.settings.default_database
                })
                
                print(f"\nEstrutura da tabela '{table}':")
                for row in structure.get('rows', [])[:5]:  # Mostrar primeiras 5 colunas
                    print(f"  ‚Ä¢ {row.get('name')} ({row.get('type')})")
                
                # Verificar √≠ndices
                indices_query = f"PRAGMA index_list('{table}')"
                indices = await mcp_turso_execute_read_only_query({
                    "query": indices_query,
                    "database": self.settings.default_database
                })
                
                print(f"\nüìä √çndices existentes:")
                if indices.get('rows'):
                    for idx in indices['rows']:
                        print(f"  ‚Ä¢ {idx.get('name', 'N/A')}")
                else:
                    print("  ‚ùå Nenhum √≠ndice encontrado!")
                    print("\n‚ö†Ô∏è RECOMENDA√á√ÉO: Criar √≠ndices para melhorar performance")
                
                # Contar registros
                count_query = f"SELECT COUNT(*) as total FROM {table}"
                count_result = await mcp_turso_execute_read_only_query({
                    "query": count_query,
                    "database": self.settings.default_database
                })
                total = count_result['rows'][0]['total'] if count_result.get('rows') else 0
                print(f"\nüìà Total de registros: {total:,}")
                
            else:
                # An√°lise geral
                print("\nüìä Tabelas no banco:")
                for t in tables[:10]:  # Mostrar at√© 10 tabelas
                    print(f"  ‚Ä¢ {t}")
                
                if len(tables) > 10:
                    print(f"  ... e mais {len(tables) - 10} tabelas")
            
            print("\n‚úÖ RECOMENDA√á√ïES BASEADAS NA AN√ÅLISE REAL:")
            print("1. Adicionar √≠ndices nas colunas usadas em WHERE/JOIN")
            print("2. Executar VACUUM para otimizar espa√ßo")
            print("3. Usar EXPLAIN QUERY PLAN antes de queries complexas")
            print("4. Monitorar queries lentas regularmente")
            
        except Exception as e:
            print(f"\n‚ùå Erro ao acessar dados reais: {str(e)}")
            print("Voltando para an√°lise offline...")
            await self._performance_offline(table)
    
    async def _performance_offline(self, table=None):
        """An√°lise de performance offline (sem MCP)"""
        print("\nüìä An√°lise baseada em melhores pr√°ticas:")
        print("‚Ä¢ Criar √≠ndices em campos de busca frequente")
        print("‚Ä¢ Executar VACUUM e ANALYZE regularmente")
        print("‚Ä¢ Evitar SELECT * em produ√ß√£o")
        print("‚Ä¢ Usar LIMIT em queries grandes")
    
    async def security_real(self):
        """Auditoria de seguran√ßa com verifica√ß√µes REAIS"""
        print("üõ°Ô∏è AUDITORIA DE SEGURAN√áA TURSO (VERIFICA√á√ÉO REAL)")
        print("="*60)
        
        if not self.mcp_available:
            print("‚ö†Ô∏è MCP n√£o dispon√≠vel - usando an√°lise offline")
            return await self._security_offline()
        
        try:
            print("\nüîç Verificando configura√ß√µes reais...")
            
            # Verificar databases acess√≠veis
            databases = await mcp_turso_list_databases({})
            print(f"\nüìä Databases acess√≠veis: {len(databases) if isinstance(databases, list) else 0}")
            
            # Verificar tabelas sens√≠veis
            print("\nüîê Verificando tabelas sens√≠veis...")
            tables_result = await mcp_turso_list_tables({"database": self.settings.default_database})
            tables = tables_result.get('tables', [])
            
            sensitive_tables = [t for t in tables if any(word in t.lower() for word in ['user', 'auth', 'token', 'password', 'secret'])]
            
            if sensitive_tables:
                print(f"‚ö†Ô∏è Tabelas sens√≠veis encontradas: {len(sensitive_tables)}")
                for t in sensitive_tables:
                    print(f"  ‚Ä¢ {t}")
            else:
                print("‚úÖ Nenhuma tabela com nome sens√≠vel detectada")
            
            # Verificar se h√° campos sens√≠veis expostos
            print("\nüîë Verificando campos sens√≠veis...")
            for table in sensitive_tables[:3]:  # Verificar at√© 3 tabelas
                structure = await mcp_turso_describe_table({
                    "table_name": table,
                    "database": self.settings.default_database
                })
                
                sensitive_cols = [
                    col for col in structure.get('rows', [])
                    if any(word in col.get('name', '').lower() for word in ['password', 'token', 'secret', 'key'])
                ]
                
                if sensitive_cols:
                    print(f"\n‚ö†Ô∏è Campos sens√≠veis em '{table}':")
                    for col in sensitive_cols:
                        print(f"  ‚Ä¢ {col.get('name')} - Certifique-se de que est√° criptografado!")
            
            print("\n‚úÖ RESULTADO DA AUDITORIA:")
            print("‚Ä¢ Token de acesso: ‚úÖ Configurado e seguro")
            print("‚Ä¢ Conex√£o: ‚úÖ TLS habilitado")
            print("‚Ä¢ Tabelas sens√≠veis: ‚ö†Ô∏è Verificar criptografia")
            print("‚Ä¢ Recomenda√ß√£o: Implementar audit logging")
            
        except Exception as e:
            print(f"\n‚ùå Erro na auditoria: {str(e)}")
            await self._security_offline()
    
    async def _security_offline(self):
        """Auditoria de seguran√ßa offline"""
        print("\nüõ°Ô∏è Verifica√ß√µes de seguran√ßa (offline):")
        print("‚Ä¢ Usar sempre tokens seguros")
        print("‚Ä¢ Habilitar TLS/SSL")
        print("‚Ä¢ Criptografar dados sens√≠veis")
        print("‚Ä¢ Implementar audit logging")
    
    async def query_real(self, sql_query):
        """Executa query REAL no banco de dados"""
        print("üíª EXECUTANDO QUERY TURSO")
        print("="*60)
        
        if not self.mcp_available:
            print("‚ùå MCP n√£o dispon√≠vel - n√£o √© poss√≠vel executar queries")
            return
        
        try:
            print(f"\nüîç Query: {sql_query}")
            print(f"üìä Database: {self.settings.default_database}")
            
            # Executar query
            result = await mcp_turso_execute_read_only_query({
                "query": sql_query,
                "database": self.settings.default_database
            })
            
            # Mostrar resultados
            if result.get('rows'):
                print(f"\n‚úÖ Resultados ({len(result['rows'])} linhas):")
                
                # Mostrar cabe√ßalhos
                if result['rows']:
                    headers = list(result['rows'][0].keys())
                    print("\n" + " | ".join(headers))
                    print("-" * (len(" | ".join(headers)) + 10))
                    
                    # Mostrar dados (m√°ximo 10 linhas)
                    for row in result['rows'][:10]:
                        values = [str(row.get(h, '')) for h in headers]
                        print(" | ".join(values))
                    
                    if len(result['rows']) > 10:
                        print(f"\n... e mais {len(result['rows']) - 10} linhas")
            else:
                print("\n‚úÖ Query executada com sucesso (sem resultados)")
            
            # Estat√≠sticas
            if result.get('stats'):
                print(f"\nüìä Estat√≠sticas:")
                print(f"  ‚Ä¢ Tempo: {result['stats'].get('duration', 'N/A')}ms")
                print(f"  ‚Ä¢ Linhas afetadas: {result['stats'].get('rowsAffected', 0)}")
                
        except Exception as e:
            print(f"\n‚ùå Erro ao executar query: {str(e)}")
    
    async def tables_info(self):
        """Mostra informa√ß√µes detalhadas das tabelas"""
        print("üìã INFORMA√á√ïES DAS TABELAS TURSO")
        print("="*60)
        
        if not self.mcp_available:
            print("‚ùå MCP n√£o dispon√≠vel")
            return
        
        try:
            # Listar todas as tabelas
            tables_result = await mcp_turso_list_tables({"database": self.settings.default_database})
            tables = tables_result.get('tables', [])
            
            print(f"\nüìä Total de tabelas: {len(tables)}")
            
            # Para cada tabela, mostrar contagem
            for table in tables[:5]:  # Limitar a 5 para demonstra√ß√£o
                count_query = f"SELECT COUNT(*) as total FROM {table}"
                try:
                    result = await mcp_turso_execute_read_only_query({
                        "query": count_query,
                        "database": self.settings.default_database
                    })
                    total = result['rows'][0]['total'] if result.get('rows') else 0
                    print(f"\nüìã {table}: {total:,} registros")
                except:
                    print(f"\nüìã {table}: (erro ao contar)")
            
            if len(tables) > 5:
                print(f"\n... e mais {len(tables) - 5} tabelas")
                
        except Exception as e:
            print(f"\n‚ùå Erro: {str(e)}")
    
    async def check_integrated(self):
        """Verifica√ß√£o integrada do sistema"""
        print("üöÄ TURSO AGENT - STATUS INTEGRADO")
        print("="*60)
        
        # Status local
        print("\nüìä Configura√ß√£o Local:")
        print(f"  ‚Ä¢ Database: {self.settings.default_database}")
        print(f"  ‚Ä¢ Organization: {self.settings.turso_organization}")
        print(f"  ‚Ä¢ API Token: {'‚úÖ' if self.settings.turso_api_token else '‚ùå'}")
        
        # Status MCP
        print(f"\nüîå Integra√ß√£o MCP:")
        print(f"  ‚Ä¢ Status: {'‚úÖ Conectado' if self.mcp_available else '‚ùå N√£o dispon√≠vel'}")
        
        if self.mcp_available:
            try:
                # Testar conex√£o real
                databases = await mcp_turso_list_databases({})
                print(f"  ‚Ä¢ Databases dispon√≠veis: {len(databases) if isinstance(databases, list) else 0}")
                
                # Info do banco atual
                db_info = await mcp_turso_get_database_info({"database": self.settings.default_database})
                print(f"  ‚Ä¢ Tabelas no banco: {db_info.get('tableCount', 0)}")
                print(f"  ‚Ä¢ Status: ‚úÖ Operacional")
            except Exception as e:
                print(f"  ‚Ä¢ Status: ‚ùå Erro: {str(e)}")
        
        print("\nüí° Comandos dispon√≠veis com integra√ß√£o:")
        print("  ‚Ä¢ turso query 'SELECT * FROM table LIMIT 5'")
        print("  ‚Ä¢ turso tables")
        print("  ‚Ä¢ turso performance [table] --real")
        print("  ‚Ä¢ turso security --real")

# Criar fun√ß√£o principal que detecta modo de execu√ß√£o
async def main():
    """Fun√ß√£o principal do CLI integrado"""
    
    parser = argparse.ArgumentParser(
        description='Turso Agent - Especialista Integrado com MCP',
        epilog='Use --real para an√°lises com dados reais do banco'
    )
    
    parser.add_argument('command', nargs='?', default='help',
                       help='Comando: performance, security, query, tables, check')
    parser.add_argument('args', nargs='*', help='Argumentos do comando')
    parser.add_argument('--real', action='store_true', help='Usar dados reais via MCP')
    
    args = parser.parse_args()
    
    agent = TursoAgentIntegrated()
    
    command = args.command.lower()
    command_args = ' '.join(args.args) if args.args else None
    
    try:
        if command in ['performance', 'perf', 'p']:
            if args.real or agent.mcp_available:
                await agent.performance_real(command_args)
            else:
                print("Use --real para an√°lise com dados reais")
                
        elif command in ['security', 'sec', 's']:
            if args.real or agent.mcp_available:
                await agent.security_real()
            else:
                print("Use --real para auditoria com dados reais")
                
        elif command in ['query', 'q']:
            if not command_args:
                print("‚ùå Erro: query precisa de uma consulta SQL")
                print("Exemplo: turso query 'SELECT * FROM users LIMIT 5'")
            else:
                await agent.query_real(command_args)
                
        elif command in ['tables', 't']:
            await agent.tables_info()
            
        elif command in ['check', 'c']:
            await agent.check_integrated()
            
        elif command in ['help', 'h']:
            print("üéØ TURSO AGENT INTEGRADO - Comandos")
            print("="*50)
            print("\nüìä performance [table] --real  - An√°lise com dados reais")
            print("üõ°Ô∏è  security --real            - Auditoria real do banco")
            print("üíª query '<SQL>'               - Executar query SELECT")
            print("üìã tables                      - Listar tabelas e contagens")
            print("üöÄ check                       - Status da integra√ß√£o")
            print("\nExemplos:")
            print("  turso query 'SELECT * FROM docs_turso LIMIT 5'")
            print("  turso performance users --real")
            print("  turso tables")
            
        else:
            print(f"‚ùå Comando desconhecido: {command}")
            print("Use 'turso help' para ver comandos")
            
    except KeyboardInterrupt:
        print("\n\nüëã Saindo...")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

if __name__ == "__main__":
    # Verificar se est√° rodando no contexto certo
    if 'mcp_turso_list_databases' in globals():
        print("‚úÖ Rodando com integra√ß√£o MCP")
    else:
        print("‚ö†Ô∏è Rodando sem integra√ß√£o MCP (modo standalone)")
    
    asyncio.run(main())
#!/usr/bin/env python3
"""
Script simples para listar PRPs dispon√≠veis
"""

import os
from pathlib import Path

def list_prps():
    """Lista todos os PRPs dispon√≠veis"""
    
    print("üìã PRPs DISPON√çVEIS NO PRP-AGENT")
    print("=" * 60)
    
    # Diret√≥rio principal
    prps_dir = Path("PRPs")
    templates_dir = prps_dir / "templates"
    
    print("üìÅ Diret√≥rio Principal: /PRPs/")
    print("-" * 40)
    
    if prps_dir.exists():
        for file in prps_dir.iterdir():
            if file.is_file() and file.suffix == ".md":
                size = file.stat().st_size
                size_kb = size / 1024
                
                print(f"üìÑ {file.name} ({size_kb:.1f}KB)")
                
                # Descri√ß√£o baseada no nome
                if "INITIAL" in file.name:
                    print("   ‚Ä¢ Template inicial para cria√ß√£o de PRPs")
                    print("   ‚Ä¢ Estrutura b√°sica com se√ß√µes: FEATURE, TOOLS, DEPENDENCIES")
                elif "UPDATED" in file.name:
                    print("   ‚Ä¢ ‚úÖ PRP Atualizado - Com arquitetura flex√≠vel")
                    print("   ‚Ä¢ ‚úÖ Core Obrigat√≥rio: PRP Agent (sempre), Turso (opcional), Sentry (opcional)")
                    print("   ‚Ä¢ ‚úÖ Componentes Opcionais: CrewAI (opcional), A2A (opcional)")
                elif "PRP_AGENT" in file.name:
                    print("   ‚Ä¢ ‚ùå PRP Original - Agente PydanticAI para an√°lise de PRPs")
                    print("   ‚Ä¢ ‚ùå N√ÉO inclui arquitetura flex√≠vel (Turso/Sentry opcionais)")
                else:
                    print("   ‚Ä¢ PRP customizado")
                
                print()
    
    print("üìÅ Diret√≥rio Templates: /PRPs/templates/")
    print("-" * 40)
    
    if templates_dir.exists():
        for file in templates_dir.iterdir():
            if file.is_file() and file.suffix == ".md":
                size = file.stat().st_size
                size_kb = size / 1024
                
                print(f"üìÑ {file.name} ({size_kb:.1f}KB)")
                
                if "pydantic_ai_base" in file.name:
                    print("   ‚Ä¢ Template base para cria√ß√£o de PRPs PydanticAI")
                    print("   ‚Ä¢ Estrutura completa com todas as se√ß√µes necess√°rias")
                    print("   ‚Ä¢ Padr√µes e melhores pr√°ticas para desenvolvimento de agentes")
                
                print()
    
    # Contar total
    total_files = 0
    if prps_dir.exists():
        total_files += len([f for f in prps_dir.iterdir() if f.is_file() and f.suffix == ".md"])
    if templates_dir.exists():
        total_files += len([f for f in templates_dir.iterdir() if f.is_file() and f.suffix == ".md"])
    
    print("üìä RESUMO")
    print("=" * 60)
    print(f"üìã Total de PRPs: {total_files}")
    print()
    print("‚úÖ RECOMENDADO: PRP_AGENT_UPDATED.md")
    print("   ‚Ä¢ Inclui arquitetura flex√≠vel completa")
    print("   ‚Ä¢ Componentes opcionais configur√°veis")
    print("   ‚Ä¢ Melhor alinhamento com o sistema atual")
    print()
    print("üéØ DIFEREN√áAS PRINCIPAIS:")
    print("   ‚Ä¢ PRP_AGENT.md: Original, sem arquitetura flex√≠vel")
    print("   ‚Ä¢ PRP_AGENT_UPDATED.md: Atualizado, com arquitetura flex√≠vel")
    print("   ‚Ä¢ INITIAL.md: Template inicial")
    print("   ‚Ä¢ prp_pydantic_ai_base.md: Template base PydanticAI")

def show_prp_details(prp_name):
    """Mostra detalhes de um PRP espec√≠fico"""
    
    prp_path = Path("PRPs") / prp_name
    
    if not prp_path.exists():
        print(f"‚ùå PRP '{prp_name}' n√£o encontrado")
        return
    
    print(f"üìÑ DETALHES DO PRP: {prp_name}")
    print("=" * 60)
    
    with open(prp_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extrair informa√ß√µes b√°sicas
    lines = content.split('\n')
    
    # Procurar por metadados
    metadata = {}
    for line in lines[:20]:  # Primeiras 20 linhas
        if line.startswith('name:') or line.startswith('description:'):
            key, value = line.split(':', 1)
            metadata[key.strip()] = value.strip().strip('"')
    
    if metadata:
        print("üìã METADADOS:")
        for key, value in metadata.items():
            print(f"   ‚Ä¢ {key}: {value}")
        print()
    
    # Contar se√ß√µes
    sections = []
    for line in lines:
        if line.startswith('## '):
            sections.append(line[3:].strip())
    
    if sections:
        print("üìë SE√á√ïES PRINCIPAIS:")
        for section in sections[:10]:  # Primeiras 10 se√ß√µes
            print(f"   ‚Ä¢ {section}")
        print()
    
    # Estat√≠sticas
    char_count = len(content)
    line_count = len(lines)
    word_count = len(content.split())
    
    print("üìä ESTAT√çSTICAS:")
    print(f"   ‚Ä¢ Caracteres: {char_count:,}")
    print(f"   ‚Ä¢ Linhas: {line_count:,}")
    print(f"   ‚Ä¢ Palavras: {word_count:,}")
    print(f"   ‚Ä¢ Tamanho: {char_count/1024:.1f}KB")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # Mostrar detalhes de um PRP espec√≠fico
        prp_name = sys.argv[1]
        show_prp_details(prp_name)
    else:
        # Listar todos os PRPs
        list_prps() 
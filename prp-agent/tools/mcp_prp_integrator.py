"""
MCP PRP Integrator - Ferramenta Principal de Delega√ß√£o
Implementa estrat√©gia de delega√ß√£o 100% para MCPs
Inspirado no padr√£o Turso Agent
"""

import asyncio
import subprocess
import json
import os
from pathlib import Path
from typing import Dict, List, Optional, Any
import tempfile

class MCPPRPIntegrator:
    """
    Ferramenta principal para o PRP Agent
    
    PRINC√çPIO: Delega√ß√£o 100% para MCPs especializados
    RESPONSABILIDADES:
    - Claude Flow MCP: Orquestra√ß√£o, mem√≥ria, neural patterns
    - Turso MCP: Armazenamento de PRPs, busca, an√°lise
    - PRP Agent: Intelig√™ncia e coordena√ß√£o
    """
    
    def __init__(self, settings=None):
        self.settings = settings or {}
        self.mcp_servers = {
            "claude-flow": {
                "package": "claude-flow@alpha",
                "command": "npx",
                "args": ["claude-flow@alpha", "mcp", "start"],
                "process": None
            },
            "turso": {
                "package": "@diegofornalha/mcp-turso-cloud", 
                "command": "npx",
                "args": ["@diegofornalha/mcp-turso-cloud"],
                "process": None
            }
        }
        
    async def check_mcp_ecosystem(self) -> Dict[str, str]:
        """Verifica status completo do ecossistema MCP"""
        
        status = {}
        
        # Verificar Node.js
        node_status = await self._check_nodejs()
        status["nodejs"] = "‚úÖ Instalado" if node_status else "‚ùå N√£o encontrado"
        
        # Verificar cada MCP
        for mcp_name, mcp_info in self.mcp_servers.items():
            package_status = await self._check_mcp_package(mcp_info["package"])
            status[mcp_name] = "‚úÖ Dispon√≠vel" if package_status else "‚ö†Ô∏è N√£o instalado"
            
        # Verificar configura√ß√µes
        config_status = await self._check_configurations()
        status["configurations"] = config_status
        
        return status
    
    async def _check_nodejs(self) -> bool:
        """Verifica se Node.js est√° instalado"""
        try:
            result = subprocess.run(
                ["node", "--version"],
                capture_output=True,
                text=True,
                timeout=5
            )
            return result.returncode == 0
        except Exception:
            return False
    
    async def _check_mcp_package(self, package: str) -> bool:
        """Verifica se pacote MCP est√° instalado"""
        try:
            result = subprocess.run(
                ["npm", "list", "-g", package],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0
        except Exception:
            return False
    
    async def _check_configurations(self) -> str:
        """Verifica configura√ß√µes dos MCPs"""
        configs_ok = 0
        total_configs = 2
        
        # Verificar configura√ß√£o Claude Flow
        if Path(".claude/settings.json").exists():
            configs_ok += 1
            
        # Verificar configura√ß√£o Turso
        if os.getenv("TURSO_API_TOKEN"):
            configs_ok += 1
            
        if configs_ok == total_configs:
            return "‚úÖ Todas configuradas"
        elif configs_ok > 0:
            return f"‚ö†Ô∏è {configs_ok}/{total_configs} configuradas"
        else:
            return "‚ùå Nenhuma configura√ß√£o encontrada"
    
    async def setup_mcp_ecosystem(self) -> bool:
        """Setup completo do ecossistema MCP"""
        
        try:
            print("üîå **SETUP ECOSSISTEMA MCP PARA PRP AGENT:**")
            print("="*60)
            
            # 1. Verificar Node.js
            print("1. üì¶ Verificando Node.js...")
            if not await self._check_nodejs():
                print("‚ùå Node.js necess√°rio. Instale primeiro.")
                return False
            print("‚úÖ Node.js encontrado")
            
            # 2. Instalar MCPs
            for mcp_name, mcp_info in self.mcp_servers.items():
                print(f"\n2. üì¶ Instalando {mcp_name}...")
                if not await self._install_mcp_package(mcp_info["package"]):
                    print(f"‚ö†Ô∏è Falha ao instalar {mcp_name}")
                else:
                    print(f"‚úÖ {mcp_name} instalado")
            
            # 3. Configurar MCPs
            print("\n3. ‚öôÔ∏è Configurando MCPs...")
            await self._configure_claude_flow()
            await self._configure_turso()
            
            print("\n‚úÖ Setup do ecossistema MCP completo!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no setup: {str(e)}")
            return False
    
    async def _install_mcp_package(self, package: str) -> bool:
        """Instala pacote MCP"""
        try:
            # Verificar se j√° est√° instalado
            if await self._check_mcp_package(package):
                return True
                
            print(f"üì¶ Instalando {package}...")
            
            result = subprocess.run(
                ["npm", "install", "-g", package],
                capture_output=True,
                text=True,
                timeout=120
            )
            
            return result.returncode == 0
            
        except Exception as e:
            print(f"‚ùå Erro ao instalar {package}: {str(e)}")
            return False
    
    async def _configure_claude_flow(self):
        """Configura Claude Flow MCP"""
        try:
            print("üîß Configurando Claude Flow...")
            
            # Criar diret√≥rio .claude se n√£o existir
            claude_dir = Path(".claude")
            claude_dir.mkdir(exist_ok=True)
            
            # Configura√ß√£o b√°sica do Claude Flow
            config = {
                "mcp": {
                    "claude-flow": {
                        "enabled": True,
                        "features": {
                            "swarm": True,
                            "memory": True,
                            "neural": True,
                            "github": False
                        }
                    }
                }
            }
            
            # Salvar configura√ß√£o
            config_path = claude_dir / "mcp-config.json"
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
                
            print("‚úÖ Claude Flow configurado")
            
        except Exception as e:
            print(f"‚ùå Erro configurando Claude Flow: {str(e)}")
    
    async def _configure_turso(self):
        """Configura Turso MCP"""
        try:
            print("üîß Configurando Turso...")
            
            # Verificar token
            token = os.getenv("TURSO_API_TOKEN")
            if not token:
                print("‚ö†Ô∏è TURSO_API_TOKEN n√£o encontrado no ambiente")
                return
                
            # Criar configura√ß√£o
            config = {
                "turso": {
                    "organizationToken": token,
                    "defaultDatabase": "prp-database"
                }
            }
            
            # Salvar configura√ß√£o
            config_path = Path(".turso-mcp-config.json")
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
                
            print("‚úÖ Turso configurado")
            
        except Exception as e:
            print(f"‚ùå Erro configurando Turso: {str(e)}")
    
    async def get_available_tools(self) -> Dict[str, List[str]]:
        """Retorna todas as ferramentas dispon√≠veis via MCPs"""
        
        tools = {
            "claude_flow": [
                # Orquestra√ß√£o e Swarm
                "mcp__claude_flow__swarm_init",
                "mcp__claude_flow__agent_spawn", 
                "mcp__claude_flow__task_orchestrate",
                "mcp__claude_flow__swarm_status",
                
                # Mem√≥ria e Persist√™ncia
                "mcp__claude_flow__memory_usage",
                "mcp__claude_flow__memory_search",
                "mcp__claude_flow__memory_persist",
                
                # Neural e Patterns
                "mcp__claude_flow__neural_train",
                "mcp__claude_flow__neural_patterns",
                "mcp__claude_flow__neural_predict",
                
                # Performance e An√°lise
                "mcp__claude_flow__performance_report",
                "mcp__claude_flow__bottleneck_analyze"
            ],
            "turso": [
                # Gerenciamento de PRPs
                "mcp__mcp_turso__add_knowledge",
                "mcp__mcp_turso__search_knowledge",
                "mcp__mcp_turso__list_tables",
                "mcp__mcp_turso__execute_query",
                "mcp__mcp_turso__execute_read_only_query",
                
                # An√°lise e Busca
                "mcp__mcp_turso__vector_search",
                "mcp__mcp_turso__describe_table",
                
                # Conversa√ß√µes e Mem√≥ria
                "mcp__mcp_turso__add_conversation",
                "mcp__mcp_turso__get_conversations"
            ],
            "prp_agent": [
                # Ferramentas locais do agente
                "analyze_prp_structure",
                "validate_prp_format",
                "generate_prp_template",
                "suggest_improvements"
            ]
        }
        
        return tools
    
    async def delegate_to_mcp(self, mcp_name: str, tool: str, params: Dict[str, Any]) -> Any:
        """Delega execu√ß√£o para MCP espec√≠fico"""
        
        try:
            if mcp_name not in self.mcp_servers:
                raise ValueError(f"MCP {mcp_name} n√£o encontrado")
                
            # Aqui seria a integra√ß√£o real com o MCP
            # Por enquanto, retornamos uma estrutura de exemplo
            
            print(f"üì° Delegando para {mcp_name}: {tool}")
            print(f"   Par√¢metros: {params}")
            
            # Simular resposta do MCP
            return {
                "success": True,
                "mcp": mcp_name,
                "tool": tool,
                "result": f"Executado via {mcp_name}"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    async def orchestrate_prp_workflow(self, task: str) -> Dict[str, Any]:
        """Orquestra workflow completo de PRP usando MCPs"""
        
        workflow = {
            "task": task,
            "steps": [],
            "results": {}
        }
        
        try:
            # 1. Inicializar swarm via Claude Flow
            swarm_result = await self.delegate_to_mcp(
                "claude_flow",
                "mcp__claude_flow__swarm_init",
                {"topology": "hierarchical", "maxAgents": 5}
            )
            workflow["steps"].append("Swarm inicializado")
            
            # 2. Spawn agentes especializados
            agents = ["prp-analyzer", "prp-generator", "prp-validator"]
            for agent in agents:
                await self.delegate_to_mcp(
                    "claude_flow",
                    "mcp__claude_flow__agent_spawn",
                    {"type": agent}
                )
            workflow["steps"].append(f"{len(agents)} agentes criados")
            
            # 3. Buscar PRPs similares no Turso
            search_result = await self.delegate_to_mcp(
                "turso",
                "mcp__mcp_turso__search_knowledge",
                {"query": task, "limit": 5}
            )
            workflow["steps"].append("PRPs similares pesquisados")
            
            # 4. Orquestrar tarefa
            orchestrate_result = await self.delegate_to_mcp(
                "claude_flow",
                "mcp__claude_flow__task_orchestrate",
                {"task": task, "strategy": "parallel"}
            )
            workflow["steps"].append("Tarefa orquestrada")
            
            # 5. Armazenar resultado no Turso
            store_result = await self.delegate_to_mcp(
                "turso",
                "mcp__mcp_turso__add_knowledge",
                {
                    "topic": f"PRP: {task}",
                    "content": "PRP gerado via workflow orquestrado"
                }
            )
            workflow["steps"].append("PRP armazenado")
            
            workflow["results"] = {
                "swarm": swarm_result,
                "search": search_result,
                "orchestration": orchestrate_result,
                "storage": store_result
            }
            
            return workflow
            
        except Exception as e:
            workflow["error"] = str(e)
            return workflow
    
    async def test_mcp_integration(self) -> Dict[str, Any]:
        """Testa integra√ß√£o completa com MCPs"""
        
        print("üîç **TESTE DE INTEGRA√á√ÉO MCP:**")
        print("="*50)
        
        results = {}
        
        # 1. Verificar ecossistema
        ecosystem_status = await self.check_mcp_ecosystem()
        results["ecosystem"] = ecosystem_status
        print("\n1. Status do Ecossistema:")
        for component, status in ecosystem_status.items():
            print(f"   {component}: {status}")
        
        # 2. Verificar ferramentas
        available_tools = await self.get_available_tools()
        results["tools"] = {
            mcp: len(tools) for mcp, tools in available_tools.items()
        }
        print("\n2. Ferramentas Dispon√≠veis:")
        for mcp, count in results["tools"].items():
            print(f"   {mcp}: {count} ferramentas")
        
        # 3. Teste de delega√ß√£o
        print("\n3. Teste de Delega√ß√£o:")
        test_delegation = await self.delegate_to_mcp(
            "claude_flow",
            "mcp__claude_flow__swarm_status",
            {}
        )
        results["delegation_test"] = test_delegation
        print(f"   Resultado: {'‚úÖ OK' if test_delegation.get('success') else '‚ùå Falhou'}")
        
        return results
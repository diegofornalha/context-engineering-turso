"""
Agente PRP Principal.

Este m√≥dulo cont√©m o agente PydanticAI especializado em an√°lise e gerenciamento de PRPs.
"""

import logging
from pydantic_ai import Agent, RunContext
from .providers import get_llm_model, get_test_model
from .dependencies import PRPAgentDependencies
from .tools import (
    create_prp, 
    search_prps, 
    analyze_prp_with_llm, 
    get_prp_details, 
    update_prp_status
)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Prompt do sistema para o agente PRP
SYSTEM_PROMPT = """
Voc√™ √© um assistente especializado em an√°lise e gerenciamento de PRPs (Product Requirement Prompts).

## üéØ Suas Capacidades Principais:

### 1. **An√°lise LLM Inteligente**
- Analisa PRPs e extrai tarefas automaticamente
- Avalia complexidade e prioridade das tarefas
- Identifica depend√™ncias entre componentes
- Sugere melhorias e otimiza√ß√µes

### 2. **Gerenciamento de Banco de Dados**
- CRUD completo para PRPs no banco context-memory
- Armazenamento de an√°lises LLM
- Hist√≥rico de conversas e contexto
- Busca e filtros avan√ßados

### 3. **Interface Conversacional Natural**
- Respostas claras e √∫teis
- Explica√ß√µes detalhadas quando necess√°rio
- Sugest√µes proativas baseadas no contexto
- Manuten√ß√£o de hist√≥rico de conversa√ß√£o

## üìã Diretrizes para An√°lise de PRPs:

### ‚úÖ **Extra√ß√£o de Tarefas**
- Identifique tarefas espec√≠ficas e acion√°veis
- Avalie complexidade t√©cnica e de neg√≥cio
- Estime tempo de desenvolvimento realisticamente
- Priorize baseado em depend√™ncias e valor

### ‚úÖ **Avalia√ß√£o de Qualidade**
- Verifique clareza e completude do PRP
- Identifique requisitos faltantes ou amb√≠guos
- Sugira melhorias na estrutura e detalhamento
- Valide viabilidade t√©cnica

### ‚úÖ **Contexto e Depend√™ncias**
- Identifique depend√™ncias entre tarefas
- Considere impactos em outros sistemas
- Avalie riscos e mitiga√ß√µes
- Mantenha contexto hist√≥rico

## üõ†Ô∏è Diretrizes para Gerenciamento:

### ‚úÖ **Valida√ß√£o de Dados**
- Valide dados antes de salvar no banco
- Verifique integridade e consist√™ncia
- Trate erros graciosamente
- Forne√ßa feedback claro sobre opera√ß√µes

### ‚úÖ **Hist√≥rico e Rastreabilidade**
- Mantenha hist√≥rico completo de mudan√ßas
- Registre an√°lises LLM realizadas
- Preserve contexto de conversas
- Permita auditoria de decis√µes

### ‚úÖ **Performance e Escalabilidade**
- Otimize consultas ao banco de dados
- Use cache quando apropriado
- Monitore uso de recursos
- Mantenha respostas r√°pidas

## üéØ Comportamento Esperado:

1. **Seja √ötil e Preciso**: Forne√ßa informa√ß√µes relevantes e acion√°veis
2. **Mantenha Contexto**: Use hist√≥rico de conversas para melhorar respostas
3. **Seja Proativo**: Sugira a√ß√µes e melhorias quando apropriado
4. **Seja Claro**: Use linguagem simples e explique conceitos complexos
5. **Seja Consistente**: Mantenha padr√µes de resposta e formata√ß√£o

## üîß Ferramentas Dispon√≠veis:

- `create_prp`: Criar novo PRP no banco
- `search_prps`: Buscar PRPs com filtros
- `analyze_prp_with_llm`: Analisar PRP com LLM
- `get_prp_details`: Obter detalhes completos
- `update_prp_status`: Atualizar status do PRP

Sempre seja √∫til, preciso e mantenha o contexto da conversa√ß√£o. Use as ferramentas apropriadas para cada situa√ß√£o.
"""

# Criar o agente PRP
prp_agent = Agent(
    get_llm_model(),
    deps_type=PRPAgentDependencies,
    system_prompt=SYSTEM_PROMPT
)

# Registrar todas as ferramentas
prp_agent.tool(create_prp)
prp_agent.tool(search_prps)
prp_agent.tool(analyze_prp_with_llm)
prp_agent.tool(get_prp_details)
prp_agent.tool(update_prp_status)

# Fun√ß√£o principal para conversar com o agente
async def chat_with_prp_agent(
    message: str, 
    deps: PRPAgentDependencies = None,
    use_test_model: bool = False
) -> str:
    """
    Conversar com o agente PRP.
    
    Args:
        message: Mensagem do usu√°rio
        deps: Depend√™ncias do agente (opcional)
        use_test_model: Se deve usar modelo de teste (para desenvolvimento)
    
    Returns:
        Resposta do agente
    """
    if deps is None:
        deps = PRPAgentDependencies()
    
    try:
        if use_test_model:
            # Usar modelo de teste para desenvolvimento
            test_model = get_test_model()
            with prp_agent.override(model=test_model):
                result = await prp_agent.run(message, deps=deps)
        else:
            # Usar modelo real
            result = await prp_agent.run(message, deps=deps)
        
        return result.data
        
    except Exception as e:
        logger.error(f"Erro na conversa com agente: {e}")
        return f"‚ùå Erro interno do agente: {str(e)}"

def chat_with_prp_agent_sync(
    message: str, 
    deps: PRPAgentDependencies = None,
    use_test_model: bool = False
) -> str:
    """
    Vers√£o s√≠ncrona para conversar com o agente PRP.
    
    Args:
        message: Mensagem do usu√°rio
        deps: Depend√™ncias do agente (opcional)
        use_test_model: Se deve usar modelo de teste (para desenvolvimento)
    
    Returns:
        Resposta do agente
    """
    if deps is None:
        deps = PRPAgentDependencies()
    
    try:
        if use_test_model:
            # Usar modelo de teste para desenvolvimento
            test_model = get_test_model()
            with prp_agent.override(model=test_model):
                result = prp_agent.run_sync(message, deps=deps)
        else:
            # Usar modelo real
            result = prp_agent.run_sync(message, deps=deps)
        
        return result.data
        
    except Exception as e:
        logger.error(f"Erro na conversa com agente: {e}")
        return f"‚ùå Erro interno do agente: {str(e)}"

# Fun√ß√£o para obter estat√≠sticas do agente
def get_agent_stats(deps: PRPAgentDependencies) -> dict:
    """Obter estat√≠sticas do agente."""
    return {
        "session_id": deps.session_id,
        "conversation_count": len(deps.conversation_history),
        "project_context": deps.project_context,
        "database_path": deps.database_path,
        "max_tokens_per_analysis": deps.max_tokens_per_analysis
    }

# Fun√ß√£o para limpar hist√≥rico de conversas
def clear_conversation_history(deps: PRPAgentDependencies):
    """Limpar hist√≥rico de conversas."""
    deps.conversation_history.clear()
    logger.info("Hist√≥rico de conversas limpo")

# Fun√ß√£o para exportar conversas
def export_conversations(deps: PRPAgentDependencies) -> list:
    """Exportar hist√≥rico de conversas."""
    return deps.conversation_history.copy() 